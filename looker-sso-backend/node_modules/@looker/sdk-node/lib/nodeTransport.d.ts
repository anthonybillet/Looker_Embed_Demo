import type * as fs from 'fs';
import type { Authenticator, HttpMethod, ICryptoHash, IRawRequest, IRawResponse, ITransportSettings, SDKResponse, Values } from '@looker/sdk-rtl';
import { BaseTransport } from '@looker/sdk-rtl';
import { WritableStream } from 'node:stream/web';
export declare class NodeCryptoHash implements ICryptoHash {
    secureRandom(byteCount: number): string;
    sha256Hash(message: string): Promise<string>;
}
export declare class NodeTransport extends BaseTransport {
    protected readonly options: ITransportSettings;
    constructor(options: ITransportSettings);
    retry(request: IRawRequest): Promise<IRawResponse>;
    rawRequest(method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<IRawResponse>;
    parseResponse<TSuccess, TError>(res: IRawResponse): Promise<SDKResponse<TSuccess, TError>>;
    request<TSuccess, TError>(method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<SDKResponse<TSuccess, TError>>;
    stream<TSuccess>(callback: (response: Response) => Promise<TSuccess>, method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<TSuccess>;
    protected initRequest(method: HttpMethod, path: string, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<import("@looker/sdk-rtl").IRequestProps>;
}
export declare const createWritableStream: (writer: ReturnType<typeof fs.createWriteStream>) => WritableStream<any>;
