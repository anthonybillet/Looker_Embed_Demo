"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWritableStream = exports.NodeTransport = exports.NodeCryptoHash = void 0;
var _crypto = _interopRequireDefault(require("crypto"));
var _buffer = require("buffer");
var process = _interopRequireWildcard(require("process"));
var _sdkRtl = require("@looker/sdk-rtl");
var _web = require("node:stream/web");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var utf8 = 'utf8';
var asString = value => {
  if (value instanceof _buffer.Buffer) {
    return _buffer.Buffer.from(value).toString(utf8);
  }
  if (value instanceof Object) {
    return JSON.stringify(value);
  }
  return value.toString();
};
class NodeCryptoHash {
  secureRandom(byteCount) {
    return _crypto.default.randomBytes(byteCount).toString('hex');
  }
  sha256Hash(message) {
    return _asyncToGenerator(function* () {
      var hash = _crypto.default.createHash('sha256');
      hash.update(message);
      return (0, _sdkRtl.safeBase64)(new Uint8Array(hash.digest()));
    })();
  }
}
exports.NodeCryptoHash = NodeCryptoHash;
class NodeTransport extends _sdkRtl.BaseTransport {
  constructor(options) {
    super(options);
    this.options = options;
  }
  retry(request) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var _request$options, _newOpts$maxTries;
      var {
        method,
        path,
        queryParams,
        body,
        authenticator
      } = request;
      var newOpts = (0, _sdkRtl.mergeOptions)(_this.options, (_request$options = request.options) !== null && _request$options !== void 0 ? _request$options : {});
      var requestPath = _this.makeUrl(path, newOpts, queryParams);
      var waiter = newOpts.waitHandler || _sdkRtl.retryWait;
      var props = yield _this.initRequest(method, requestPath, body, authenticator, newOpts);
      var response = (0, _sdkRtl.initResponse)(method, requestPath);
      var maxTries = (_newOpts$maxTries = newOpts.maxTries) !== null && _newOpts$maxTries !== void 0 ? _newOpts$maxTries : 1;
      var attempt = 1;
      var _loop = function* _loop() {
        var req = fetch(props.url, props);
        var requestStarted = Date.now();
        try {
          var res = yield req;
          var responseCompleted = Date.now();
          var started = _sdkRtl.BrowserTransport.markStart(_sdkRtl.BrowserTransport.markName(requestPath));
          var contentType = String(res.headers.get('content-type'));
          var mode = (0, _sdkRtl.responseMode)(contentType);
          var responseBody = mode === _sdkRtl.ResponseMode.binary ? res.blob() : res.text();
          if (!('fromRequest' in newOpts)) {
            _sdkRtl.BrowserTransport.markEnd(requestPath, started);
          }
          var headers = {};
          res.headers.forEach((value, key) => headers[key] = value);
          response = {
            method,
            url: requestPath,
            body: responseBody,
            contentType,
            statusCode: res.status,
            statusMessage: res.statusText,
            startMark: started,
            headers,
            requestStarted,
            responseCompleted,
            ok: true
          };
          response.ok = _this.ok(response);
          if ((0, _sdkRtl.canRetry)(response.statusCode) && attempt < maxTries) {
            var result = yield (0, _sdkRtl.pauseForRetry)(request, response, attempt, waiter);
            if (result.response === 'cancel') {
              if (result.reason) {
                response.statusMessage = result.reason;
              }
              return "break";
            } else if (result.response === 'error') {
              if (result.reason) {
                response.statusMessage = result.reason;
              }
              return {
                v: (0, _sdkRtl.retryError)(response)
              };
            }
          } else {
            return "break";
          }
          attempt++;
        } catch (e) {
          response.ok = false;
          response.body = e;
          response.statusCode = e.statusCode;
          response.statusMessage = e.message;
          return {
            v: response
          };
        }
      };
      while (attempt <= maxTries) {
        var _ret = yield* _loop();
        if (_ret === "break") break;
        if (typeof _ret === "object") return _ret.v;
      }
      return response;
    })();
  }
  rawRequest(method, path, queryParams, body, authenticator, options) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      var response = yield _this2.retry({
        method,
        path,
        queryParams,
        body,
        authenticator,
        options
      });
      return _this2.observer ? _this2.observer(response) : response;
    })();
  }
  parseResponse(res) {
    return _asyncToGenerator(function* () {
      var mode = (0, _sdkRtl.responseMode)(res.contentType);
      var response;
      var error;
      if (!res.ok) {
        error = yield res.body;
        if (typeof error === 'string') {
          try {
            error = JSON.parse(error);
          } catch (_unused) {
            error = {
              message: "Request failed: ".concat(error)
            };
          }
        }
        response = {
          ok: false,
          error
        };
        return response;
      }
      var result = yield res.body;
      if (mode === _sdkRtl.ResponseMode.string) {
        if (res.contentType.match(/^application\/.*\bjson\b/g)) {
          try {
            if (result instanceof _buffer.Buffer) {
              result = _buffer.Buffer.from(result).toString();
            }
            if (!(result instanceof Object)) {
              result = JSON.parse(result.toString());
            }
          } catch (err) {
            error = err;
          }
        } else if (!error) {
          result = asString(result);
        }
      } else {
        try {
          var body = yield result;
          if (typeof body === 'string') {
            result = body;
          } else {
            var bytes = yield body.arrayBuffer();
            result = _buffer.Buffer.from(bytes !== null && bytes !== void 0 ? bytes : '').toString('binary');
          }
        } catch (err) {
          error = err;
        }
      }
      if (!error) {
        response = {
          ok: true,
          value: result
        };
      } else {
        response = {
          ok: false,
          error: error
        };
      }
      return response;
    })();
  }
  request(method, path, queryParams, body, authenticator, options) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        var res = yield _this3.rawRequest(method, path, queryParams, body, authenticator, options);
        return yield _this3.parseResponse(res);
      } catch (e) {
        var error = {
          message: typeof e.message === 'string' ? e.message : "The SDK call was not successful. The error was '".concat(e, "'."),
          type: 'sdk_error'
        };
        return {
          error,
          ok: false
        };
      }
    })();
  }
  stream(callback, method, path, queryParams, body, authenticator, options) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      var newOpts = _objectSpread(_objectSpread({}, _this4.options), {}, {
        options
      });
      var requestPath = _this4.makeUrl(path, newOpts, queryParams);
      var init = yield _this4.initRequest(method, requestPath, body, authenticator, newOpts);
      var response = yield fetch(requestPath, init);
      return yield callback(response);
    })();
  }
  initRequest(method, path, body, authenticator, options) {
    var _superprop_getInitRequest = () => super.initRequest,
      _this5 = this;
    return _asyncToGenerator(function* () {
      var props = yield _superprop_getInitRequest().call(_this5, method, path, body, authenticator, options);
      props.credentials = undefined;
      if (!(0, _sdkRtl.verifySsl)(options)) {
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
      }
      return props;
    })();
  }
}
exports.NodeTransport = NodeTransport;
var createWritableStream = writer => {
  return new _web.WritableStream({
    write: chunk => {
      writer.write(chunk);
    }
  });
};
exports.createWritableStream = createWritableStream;
//# sourceMappingURL=nodeTransport.js.map